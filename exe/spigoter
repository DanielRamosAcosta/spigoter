#!/usr/bin/env ruby

require 'spigoter'
require 'optparse'

options = {}

subtext = <<HELP
COMMAND are:
   start [options]    starts the server
   update [options]   updates plugin
   compile [options]  compiles spigot and replaces as the current version

See '#{File.basename $0} COMMAND --help' for more information on a specific command.
HELP

global = OptionParser.new do |opts|
    opts.banner = "Usage: opt.rb <COMMAND> [options]"
    opts.separator ""
    opts.separator subtext
end

subcommands = {
    'init' => OptionParser.new do |opts|
        opts.banner = "Usage: #{File.basename $0} init"
        opts.separator "\nCreates a new spigoter.yml for you"
    end,
    'start' => OptionParser.new do |opts|
        opts.banner = "Usage: #{File.basename $0} start [options]"
        opts.separator "\nStarts the server"
    end,
    'update' => OptionParser.new do |opts|
        opts.banner = "Usage: #{File.basename $0} update [options]"
        opts.on("-l", "--list=[x,y,z]", Array, "list of plugins to update") do |par|
            options[:list] = par
        end
        opts.on("-f", "--force", "forces to updates all plugins, even if no new version was found") do |par|
            options[:force] = par
        end
        opts.separator "\nUpdates the plugins"
    end,
    'compile' => OptionParser.new do |opts|
        opts.banner = "Usage: #{File.basename $0} update [options]"
        opts.on("-v", "--version", String, "version of spigot to compile (lastest by default)") do |par|
            options[:version] = par || 'lastest'
        end
        opts.separator "\nCompiles spigot and sets it as the current version"
    end
}

global.order!

command = ARGV.shift

begin
    subcommands[command].order!
rescue
    Log.error "Unrecognized subcommand or param, do #{File.basename $0} --help"
    exit(1)
end


puts "Command: #{command} "
p options
puts "ARGV:"
p ARGV

Spigoter::CLI::run(command, options)